"""
Django settings for OCMCORE project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import logging
import logging.config
import datetime

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4gl(u+caszq7=7+4o++ifms%uazal4!-$*^hg@i^8^k(w2^bp@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [    'logs',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    
    # Local apps
    'attribution',
    'cache',
    'logs',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'middleware.RequestLoggingMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'logs',
]

ROOT_URLCONF = 'OCMCORE.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
    'logs',
]

WSGI_APPLICATION = 'OCMCORE.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

def get_db_config(prefix):
    return {
        'ENGINE': 'mssql',
        'NAME': os.environ.get(f'{prefix}_DB_NAME', ''),
        'HOST': os.environ.get(f'{prefix}_DB_HOST', ''),
        'PORT': os.environ.get(f'{prefix}_DB_PORT', '1433'),
        'OPTIONS': {
            'driver': 'ODBC Driver 17 for SQL Server',
            'trusted_connection': 'yes',
        },
    }

DATABASES = {}
for db_alias in os.environ.get('DATABASE_LIST', 'default').split(','):
    db_alias = db_alias.strip()
    prefix = db_alias.upper()
    DATABASES[db_alias] = get_db_config(prefix)


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    'logs',
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Cache Configuration
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
        "LOCATION": f"{os.environ.get('MEMCACHED_HOST', 'localhost')}:{os.environ.get('MEMCACHED_PORT', 11211)}",
        "OPTIONS": {
            "no_delay": True,
            "ignore_exc": True,
            "max_pool_size": 4,
            "use_pooling": True,
        }
    }
}

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}

# CORS Configuration
CORS_ALLOW_ALL_ORIGINS = True  # For development only
CORS_ALLOW_CREDENTIALS = True

LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {name} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'stream': 'ext://sys.stdout',
        },
        'file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'ocmcore.log'),
            'when': 'midnight',
            'backupCount': 14,
            'formatter': 'verbose',
            'encoding': 'utf8',
            'suffix': '%Y-%m-%d',
        },
        'error_file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'ocmcore_errors.log'),
            'when': 'midnight',
            'backupCount': 14,
            'formatter': 'verbose',
            'level': 'ERROR',
            'encoding': 'utf8',
            'suffix': '%Y-%m-%d',
        },
        # Per-app handlers (daily rotation, date in filename)
        'attribution_file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'attribution.log'),
            'when': 'midnight',
            'backupCount': 14,
            'formatter': 'verbose',
            'encoding': 'utf8',
            'suffix': '%Y-%m-%d',
        },
        'cache_file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'cache.log'),
            'when': 'midnight',
            'backupCount': 14,
            'formatter': 'verbose',
            'encoding': 'utf8',
            'suffix': '%Y-%m-%d',
        },
        'logs_file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'logs.log'),
            'when': 'midnight',
            'backupCount': 14,
            'formatter': 'verbose',
            'encoding': 'utf8',
            'suffix': '%Y-%m-%d',
        },
        # Add more app handlers as needed
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        # App-specific loggers
        'attribution': {
            'handlers': ['console', 'file', 'attribution_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'cache': {
            'handlers': ['console', 'file', 'cache_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'logs': {
            'handlers': ['console', 'file', 'logs_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Add more app loggers as needed
    },
}
